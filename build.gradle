buildscript {
	repositories {
		maven { url 'https://maven.minecraftforge.net' }
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
	}
}

plugins {
	id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.71.8'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'

version = "${minecraft_version}-${mod_version}"
group = "${mod_base_package}"
archivesBaseName = "${mod_id}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

configurations {
	api
}

sourceSets {
	api {
		java {
			srcDirs = [ 'src/api/java' ]
		}

		resources {
			srcDirs = [ 'src/api/resources' ]
		}

		compileClasspath += configurations.getByName("minecraft")
	}

	main {
		compileClasspath += sourceSets.api.output
		runtimeClasspath += sourceSets.api.output
	}
}

minecraft {
	mappings channel: 'official', version: "${minecraft_version}"

	runs {
		client {
			taskName 'Client'
			workingDirectory file('run/client')
			// property 'forge.logging.markers', 'REGISTRIES'
			// property 'forge.logging.console.level', 'debug'
			property 'fml.earlyprogresswindow', 'false'
			property 'forge.enableGameTest', 'true'
			property 'forge.enabledGameTestNamespaces', "${mod_id}"

			mods {
				"${mod_id}" {
					source sourceSets.main
					source sourceSets.test
				}
			}
		}

		if(project.hasProperty('mc_uuid') & project.hasProperty('mc_username')) {
			clientAuthed {
				parent runs.client
				taskName 'Client-Authed'
				args '--uuid', project.getProperty('mc_uuid'), '--username', project.getProperty('mc_username')
			}
		}

		server {
			taskName 'Server'
			workingDirectory file('run/server')
			// property 'forge.logging.markers', 'REGISTRIES'
			// property 'forge.logging.console.level', 'debug'
			property 'fml.earlyprogresswindow', 'false'
			property 'forge.enableGameTest', 'true'
			property 'forge.enabledGameTestNamespaces', "${mod_id}"
			args 'nogui'

			mods {
				"${mod_id}" {
					source sourceSets.main
					source sourceSets.test
				}
			}
		}

		gameTestServer {
			taskName 'GameTest-Server'
			workingDirectory file('run/gametest-server')
			// property 'forge.logging.markers', 'REGISTRIES'
			// property 'forge.logging.console.level', 'debug'
			property 'fml.earlyprogresswindow', 'false'
			property 'forge.enableGameTest', 'true'
			property 'forge.enabledGameTestNamespaces', "${mod_id}"
			args 'nogui'
			forceExit false

			mods {
				"${mod_id}" {
					source sourceSets.main
					source sourceSets.test
				}
			}
		}

		data {
			taskName 'Data'
			workingDirectory file('run/client')
			// property 'forge.logging.markers', 'REGISTRIES'
			// property 'forge.logging.console.level', 'debug'
			property 'fml.earlyprogresswindow', 'false'
			args '--mod', mod_id, '--client', '--server', '--validate', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
			// ForgeGradle will just force-exit the Gradle Daemon which fails our builds in case
			// a daemon is used for any reason.
			forceExit false

			mods {
				"${mod_id}" {
					source sourceSets.main
					source sourceSets.api
				}
			}
		}
	}
}

sourceSets.main.resources {
	srcDir 'src/generated/resources'
}

dependencies {
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier 'sources'
	exclude 'META-INF/mods.toml'
	from sourceSets.api.allJava
	from sourceSets.api.resources
}

task deobfJar(type: Jar) {
	classifier 'deobf'
	exclude '**/*bbmodel'
	exclude 'META-INF/mods.toml'
	from sourceSets.api.output
}

jar.enabled = false

task realJar(type: Jar) {
	exclude '**/*bbmodel'
	exclude 'META-INF/mods.toml'
	from sourceSets.api.output.classesDirs
	from sourceSets.api.output.resourcesDir
}

artifacts {
	archives realJar
	archives sourcesJar
	archives deobfJar
}

if(System.getenv('GENERATE_CHANGELOG') != null) {
	def previousGitTag
	def currentGitTag = "v${mod_version}"

	try {
		def code = new ByteArrayOutputStream()

		exec {
			commandLine 'git', 'describe', '--abbrev=0', '--tags', '--exclude', currentGitTag
			standardOutput code
		}

		previousGitTag = code.toString().trim()
	} catch(e) {
		previousGitTag = ''
	}

	task gitChangelogTask(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
		file = file("CHANGELOG.md")
		fromRepo = file('.')
		fromRef = "${previousGitTag}"
		toRef = "v${mod_version}"
		templateContent = file('.github/changelog.mustache').text
		                                                    .replace('{current_tag}', "${currentGitTag}")
		                                                    .replace('{mod_git_url}', "${mod_git_url}")
		                                                    .replace('{last_tag}', "${previousGitTag}")
	}
}

tasks.withType(Jar) {
	from file('LICENSE')

	manifest {
		attributes([
				'Specification-Title': "${mod_name}",
				'Specification-Vendor': "${mod_authors}",
				'Specification-Version': "${mod_version}",
				'Implementation-Title': "${mod_name}",
				'Implementation-Version': "${project.version}",
				'Implementation-Vendor' : "${mod_authors}",
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				'FMLModType': 'GAMELIBRARY'
		])
	}
}

realJar.finalizedBy('reobfJar')

if(System.getenv('APEX_MODS_MAVEN_USERNAME') != null && System.getenv('APEX_MODS_MAVEN_PASSWORD') != null) {
	publishing {
		publications {
			mavenJava(MavenPublication) {
				groupId = "${mod_base_package}"
				artifactId = "${mod_id}"
				version = "${minecraft_version}-${mod_version}"

				artifact realJar
				artifact sourcesJar
				artifact deobfJar
			}
		}
		repositories {
			maven {
				name 'ApexMods-Maven'
				url 'https://apexmodder.jfrog.io/artifactory/mods-maven/'

				credentials {
					username System.getenv('APEX_MODS_MAVEN_USERNAME')
					password System.getenv('APEX_MODS_MAVEN_PASSWORD')
				}
			}
		}
	}
} else {
	publishing {
		publications {
			mavenJava(MavenPublication) {
				groupId = "${mod_base_package}"
				artifactId = "${mod_id}"
				version = "${minecraft_version}-${mod_version}"
				artifact realJar
				artifact sourcesJar
				artifact deobfJar
			}
		}
		repositories {
			mavenLocal()
		}
	}
}