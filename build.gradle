plugins {
	id 'java'
	id 'idea'
	id 'maven-publish'

	id 'net.minecraftforge.gradle' version '[6.0,6.2)'
	id 'org.spongepowered.mixin' version '0.7.+'
//	id 'org.parchmentmc.librarian.forgegradle' version '1.+'
	id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1'
	id 'com.palantir.git-version' version '1.0.0'
	id 'net.minecraftforge.gradleutils' version '2.+'
}

afterEvaluate {
	tasks.setupTeamCityProject.enabled = false
	tasks.findByName('configureTeamCity')??.enabled = false
}

def repo = versionDetails()
version = "${repo.lastTag.substring(1)}.${repo.commitDistance}"
group = "${mod_base_package}"
archivesBaseName = "${mod_id}-${minecraft_version}"

jarJar.enable()

sourceSets {
	main {
		java {
			srcDirs = [ 'src/main/java' ]
		}

		resources {
			srcDirs = [ 'src/main/resources', 'src/generated/resources' ]
		}
	}

	test {
		java {
			srcDirs = [ 'src/test/java' ]
		}

		resources {
			srcDirs = [ 'src/test/resources' ]
		}
	}
}

minecraft {
//	mappings channel: 'parchment', version: "${parchment_mappings}-${minecraft_version}"
	mappings channel: 'official', version: "${minecraft_version}"
	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	runs {
		client {
			taskName 'Client'
			workingDirectory file('run/client')
			property 'forge.logging.markers', ''
			property 'forge.logging.console.level', 'debug'
			property 'fml.earlyprogresswindow', 'false'
			property 'forge.enableGameTest', 'true'
			property 'forge.enabledGameTestNamespaces', "${mod_id}"
			args '--width', 1920, '--height', 1080

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}

		if(project.hasProperty('mc_uuid') & project.hasProperty('mc_username')) {
			clientAuthed {
				parent runs.client
				taskName 'Client-Authed'
				args '--uuid', project.getProperty('mc_uuid'), '--username', project.getProperty('mc_username')
			}
		}

		server {
			taskName 'Server'
			workingDirectory file('run/server')
			property 'forge.logging.markers', ''
			property 'forge.logging.console.level', 'debug'
			property 'fml.earlyprogresswindow', 'false'
			property 'forge.enableGameTest', 'true'
			property 'forge.enabledGameTestNamespaces', "${mod_id}"
			args 'nogui'

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}

		gameTestServer {
			taskName 'GameTest-Server'
			workingDirectory file('run/gametest-server')
			property 'forge.logging.markers', ''
			property 'forge.logging.console.level', 'debug'
			property 'fml.earlyprogresswindow', 'false'
			property 'forge.enableGameTest', 'true'
			property 'forge.enabledGameTestNamespaces', "${mod_id}"
			args 'nogui'

			mods {
				"${mod_id}" {
					source sourceSets.main
					source sourceSets.test
				}
			}
		}

		data {
			taskName 'Data'
			workingDirectory file('run/client')
			property 'forge.logging.markers', ''
			property 'forge.logging.console.level', 'debug'
			property 'fml.earlyprogresswindow', 'false'
			args '--mod', mod_id, '--client', '--server', '--validate', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

			mods {
				"${mod_id}" {
					source sourceSets.main
					source sourceSets.test
				}
			}
		}
	}
}

if(file("./src/main/resources/${mod_id}.mixins.json").exists()) {
	mixin {
		add sourceSets.main, "${mod_id}.refmap.json"
		config "${mod_id}.mixins.json"
	}
}

repositories {
	mavenCentral()
	mavenLocal()
	maven { url 'https://dvs1.progwml6.com/files/maven' }
	maven { url 'https://maven.tterrag.com/' }
	maven { url 'https://maven.covers1624.net/' }

	maven {
		url 'https://cursemaven.com'

		content {
			includeGroup "curse.maven"
		}
	}

	maven {
		url 'https://api.modrinth.com/maven'
		content {
			includeGroup 'maven.modrinth'
		}
	}
}

dependencies {
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
	annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
	options.release.set(JavaLanguageVersion.of("${java_version}").asInt())

	javaToolchains {
		compilerFor {
			languageVersion.set(JavaLanguageVersion.of("${java_version}"))
		}
	}
}

changelog {
	fromTag "${repo.lastTag}"
}

tasks.withType(Jar) {
	from tasks.createChangelog.outputFile
	from file('LICENSE')

	manifest {
		attributes([
				'Specification-Title': "${project.name}",
				'Specification-Vendor': 'ApexStudios',
				'Specification-Version': "${project.version}",
				'Implementation-Title': "${mod_name}",
				'Implementation-Version': "${project.version}",
				'Implementation-Vendor' : 'ApexStudios',
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}

	if(file("./src/main/resources/${mod_id}.mixins.json").exists()) {
		manifest {
			attributes 'MixinConfigs': "${mod_id}.mixins.json"
		}
	}
}

java {
	toolchain {
		languageVersion.set(JavaLanguageVersion.of("${java_version}"))
	}

	withSourcesJar()
}

tasks.jarJar.configure {
	archiveClassifier = ''
}

jar {
	archiveClassifier = 'slim'
	from sourceSets.main.output.classesDirs
	from sourceSets.main.output.resourcesDir
}

artifacts {
	archives jar
	archives sourcesJar
	archives tasks.jarJar
}

reobf {
	jarJar { }
}

jar.finalizedBy('reobfJar')
tasks.jarJar.finalizedBy('reobfJarJar')

task sendDiscordChangelog {
	dependsOn tasks.createChangelog

	doLast {
		if(System.getenv('DISCORD_CHANGELOG_WEBHOOK_URL') != null) {
			def emojis = [
					// ApexStudios
					'modrinth': '<:modrinth:1087664953235869696>',
					'curseforge': '<:curseforge:1087664975121752085>',
					'minecraft': '<:minecraft:1087669093974421544>',
					'minecraftforge': '<:forge:1087669091487195205>',
					'github': '<:github:1087671203642216521>'

					// Test Server
					/*'modrinth': '<:modrinth:1087665302067740722>',
					'curseforge': '<:curseforge:1087665287186366504>',
					'minecraft': '<:minecraft:1087667250565226536>',
					'minecraftforge': '<:forge:1087667248371605524>',
					'github': '<:github:1087671103360614400>'*/
			]

			def body = [
					username: 'ApexStudios',
					avatar_url: 'https://raw.githubusercontent.com/ApexStudios-Dev/.github/master/assets/apexstudios/Logo.png',
					embeds: [
							[
									title: "**${mod_name}** updated to **_v${version}_**!",
									description: "[For full changelog see here](https://updates.apexstudios.dev/${mod_id}/${project.version})\n\n[${emojis['github']} **Download**](https://github.com/ApexStudios-Dev/${mod_name})",
									url: "https://updates.apexstudios.dev/${mod_id}/${project.version}",
									color: "${Integer.decode(mod_color)}",
									footer: [
											text: 'ApexStudios',
											icon_url: 'https://raw.githubusercontent.com/ApexStudios-Dev/.github/master/assets/apexstudios/Logo.png',
									],
									author: [
											name: "${mod_name}",
											url: "https://updates.apexstudios.dev/${mod_id}/${project.version}",
											icon_url: "https://raw.githubusercontent.com/ApexStudios-Dev/.github/master/assets/minecraft/${mod_id}_logo.png"
									],
									fields: [
											[
													name: "${emojis['minecraft']} Minecraft",
													value: "[${minecraft_version}](https://minecraft.net/)",
													inline: true
											],
											[
													name: "${emojis['minecraftforge']} MinecraftForge",
													value: "[${forge_version}](https://files.minecraftforge.net/net/minecraftforge/forge/index_${minecraft_version}.html)",
													inline: true
											]
									]
							]
					]
			]

			def req = new URL(System.getenv('DISCORD_CHANGELOG_WEBHOOK_URL')).openConnection()
			req.setRequestMethod('POST')
			req.setRequestProperty('Content-Type', 'application/json; charset=UTF-8')
			req.setDoOutput(true)
			req.getOutputStream().write(groovy.json.JsonOutput.toJson(body).getBytes('UTF-8'))
			// read the response, without this, webhook wont actually be sent
			// we should maybe, perhaps, handle any errors that could occur, or at least log them
			def t = req.getInputStream().getText()
		} else {
			println '[Discord-Changelog] Missing required "DISCORD_CHANGELOG_WEBHOOK_URL" Environment Variable!!!'
		}
	}
}

task publishChangelogFile {
	dependsOn tasks.createChangelog

	doLast {
		if(System.getenv('APEXSTUDIOS_CHANGELOG_SERVER_KEY') != null) {
			def changelogLines = tasks.createChangelog.outputFile.map { it.asFile.text.split('\n').drop(1).join('\n') }.get()
			def url = "https://updates.apexstudios.dev/${mod_id}/${project.version}"
			println "[Changelog-Server] Publishing changelog to: ${url}"

			def req = new URL(url).openConnection()
			req.setRequestMethod('PUT')
			req.setRequestProperty('X-Api-Key', System.getenv('APEXSTUDIOS_CHANGELOG_SERVER_KEY'))
			req.setDoOutput(true)
			req.getOutputStream().write(changelogLines.getBytes('utf-8'))
			// read the response, without this, webhook wont actually be sent
			// we should maybe, perhaps, handle any errors that could occur, or at least log them
			def t = req.getInputStream().getText()
		} else {
			println '[Changelog-Server] Missing required "APEXSTUDIOS_CHANGELOG_SERVER_KEY" Environment Variable!!!'
		}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			groupId = "${project.group}"
			artifactId = "${mod_id}-${minecraft_version}"
			version = "${project.version}"

			artifact jar
			artifact sourcesJar
			artifact tasks.jarJar
		}
	}

	repositories {
		if(System.getenv('MAVEN_PASSWORD') != null) {
            maven {
                name 'Covers1624-Maven'
                url 'https://nexus.covers1624.net/repository/apex-releases/'

                credentials {
                    username 'apex'
                    password System.getenv('MAVEN_PASSWORD')
                }
            }
        }
	}
}

idea.module {
	excludeDirs << file('run')
}
