rootProject.name = "${mod_name}"

/*gradle.rootProject { root ->
	// download latest AT file (only if its outdated and needs downloading)
	// Note: after at file has been update you occasionally have to double import
	// the gradle project as it doesnt pick up the changes during the first import all the time
	// TL;DR: if you see `Downloading new AccessTransformer file (Outdated)...` or `Downloading AccessTransformer file...` wait for import to finish and refresh the gradle project

	def newATFile = File.createTempFile('accesstransformer', '.cfg.tmp')
	newATFile.deleteOnExit()

	def currentATFile = root.file('accesstransformer.cfg')

	new URL('https://raw.githubusercontent.com/ApexStudios-Dev/Version/master/accesstransformers/1.18.2.cfg').readLines().forEach { line ->
		newATFile.withWriterAppend { writer ->
			writer.println line
		}
	}

	if(currentATFile.exists()) {
		try {
			def digest = MessageDigest.getInstance('SHA-256')

			digest.update(Files.readAllBytes(Paths.get(currentATFile.absolutePath)))
			def currentHash = digest.digest().encodeHex().toString()

			digest.update(Files.readAllBytes(Paths.get(newATFile.absolutePath)))
			def newHash = digest.digest().encodeHex().toString()

			if(!currentHash.equals(newHash)) {
				println('Downloading new AccessTransformer file (Outdated)...')

				copy {
					from newATFile
					into root.projectDir
					rename {
						'accesstransformer.cfg'
					}
				}
			}
		} catch(IOException e) {
			throw new GradleScriptException('Error occurred while validating file hashes', e)
		}
	} else {
		println('Downloading AccessTransformer file...')

		copy {
			from newATFile
			into root.projectDir
			rename {
				'accesstransformer.cfg'
			}
		}
	}
}*/

gradle.beforeProject { prj ->
	// ensure required properties exist
	new URL('https://raw.githubusercontent.com/ApexStudios-Dev/Version/master/properties/1.18.2.properties').readLines().forEach { line ->
		def split = line.split('=', 2)

		if(split.length == 2) {
			def key = split[0]
			if(!prj.hasProperty(key)) {
				def value = split[1]
				println("[${prj.name}] Missing required property '${key}', Using default from remote (${value}). [Override by specificing in some `gradle.properties` file]")
				prj.properties.put(key, value)
				prj.ext.set(key, value)
			}
		}
	}
}